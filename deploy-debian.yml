---

# https://fastoredis.com/trial_users_downloads/linux/fastoredis-1.16.1-x86_64.deb
#

# sudo add-apt-repository ppa:linuxuprising/java
# sudo apt update
# sudo apt install oracle-java10-installer
# sudo apt install oracle-java10-set-default


- name: "List installed snap packages"
  command: snap list
  register: snap_packages_list
  changed_when: false
  check_mode: false
  tags:
    - install-snap-packages

- name: "install snap packages"
  command: snap install {{ item }}
  register: install_snap_package
  with_items:
    "{{ snap_packages }}"
  when: item not in snap_packages_list.stdout
  tags:
    - install-snap-packages

- name: "install snap classic packages"
  command: snap install {{ item }} --classic
  register: install_snap_package
  with_items:
    "{{ snap_classic_packages }}"
  when: item not in snap_packages_list.stdout
  tags:
    - install-snap-packages

#
# install nvm
#

- name: "get latest nvm"
  uri:
    url: "https://github.com/creationix/nvm/releases/latest"
    return_contents: false
  register: output_result


- name: "get latest version"
  set_fact:
    nvm_latest: "{{ output_result.url | basename }}"

- debug:
    var: nvm_latest

- name: get stats on nvm
  become: false
  stat: path="~/.nvm/nvm.sh"
  register: nvm_stat


- name: "download nvm script"
  get_url:
    dest: "/usr/local/src/nvm-{{ nvm_latest }}-install.sh"
    url: https://raw.githubusercontent.com/creationix/nvm/{{ nvm_latest }}/install.sh
  when: not nvm_stat.stat.exists

- name: run nvm script
  command: "bash /usr/local/src/nvm-{{ nvm_latest }}-install.sh"
  become: false
  when: not nvm_stat.stat.exists

- name: "add nvm to ~/.bashrc"
  lineinfile:
    dest: "~/.bashrc"
    line: "source ~/.nvm/nvm.sh"
  become: false

- name: "set default to system version of node"
  lineinfile:
    dest: "~/.bashrc"
    line: "nvm alias default system"
  become: false

- name: "ensure we always go back to the default"
  lineinfile:
    dest: "~/.bashrc"
    line: "nvm use default"
  become: false

#
# install postman
#
- name: "download Postman"
  uri:
    url: "https://dl.pstmn.io/download/latest/linux?arch=64"
    method: HEAD
    follow_redirects: safe
  register: head_query

#
#         "content_disposition": "attachment; filename=Postman-linux-x64-6.1.4.tar.gz",
#
- set_fact:
    postman_filename: "{{ head_query.content_disposition | regex_replace(ver_regex, '\\1') }}"
  vars:
    ver_regex: '^attachment; filename=(.*)$'

- debug:
    var: postman_filename

- name: "check for installed version file"
  stat:
    path: "/usr/local/src/{{ postman_filename }}"
  register: installed_version


- name: "download Postman"
  get_url:
    url: "https://dl.pstmn.io/download/latest/linux?arch=64"
    dest: "/usr/local/src"
    validate_certs: false
  register: new_postman
  when: not installed_version.stat.exists

- name: "Extract and install postman"
  unarchive:
    src: "/usr/local/src/{{ postman_filename }}"
    dest: "/usr/local/"
    owner: root
    group: root
  when: new_postman is changed

- name: "install Postman link"
  file:
    state: link
    force: false
    src: '/usr/local/Postman/app/Postman'
    dest: '/usr/local/bin/Postman'
    owner: root
    group: root
    mode: 'u=rwx,go=rx'

- name: "create desktop icon"
  copy:
    dest: "/usr/share/applications/Postman.desktop"
    content: |
      [Desktop Entry]
      Encoding=UTF-8
      Name=Postman
      Exec=/usr/local/bin/Postman
      Icon=/usr/local/Postman/app/resources/app/assets/icon.png
      Terminal=false
      Type=Application
      Categories=Development;

#
# Install SQL Operations Center
#
- name: "get SQLOS latest version"
  uri:
    url: "https://api.github.com/repos/Microsoft/sqlopsstudio/releases"
    method: GET
    body: JSON
    return_contents: false
  register: json_output
  check_mode: false

- name: "get version url"
  set_fact:
    sqlos_version: "{{ json_output.json | json_query(version_qry) }}"
  vars:
    version_qry: "[0].tag_name"

- debug:
    var: sqlos_version

- name: "Download azure data studio"
  get_url:
    url: "https://github.com/Microsoft/azuredatastudio/releases/download/{{ sqlos_version }}/azuredatastudio-linux-{{ sqlos_version }}.deb"
    dest: "/usr/local/src/azuuredatastudio-{{ sqlos_version }}.deb"


#
#  Install ngrok
#
- name: "Download ngrok"
  get_url:
    url: https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
    dest: /usr/local/src/ngrok-stable_linux_amd64.zip

- name: "Extract and install ngrok"
  unarchive:
    src: /usr/local/src/ngrok-stable_linux_amd64.zip
    dest: /usr/local/bin
    copy: false


#
# install terraform
#
- name: "get terraform latest version"
  uri:
    url: "https://checkpoint-api.hashicorp.com/v1/check/terraform"
    method: GET
    body: JSON
    return_contents: false
  register: json_output
  check_mode: false

#
# Find latest version of vagrant.
#
- name: "set version keys"
  set_fact:
    terraform_ver: "{{ json_output.json | json_query(ver_qry) }}"
  vars:
    ver_qry: "current_version"

- debug:
    var: terraform_ver

- name: "Download Terraform"
  get_url:
    url: https://releases.hashicorp.com/terraform/{{ terraform_ver }}/terraform_{{ terraform_ver }}_linux_amd64.zip
    dest: /usr/local/src/terraform_{{ terraform_ver }}_linux_amd64.zip

- name: "Extract and install Terraform"
  unarchive:
    src: /usr/local/src/terraform_{{ terraform_ver }}_linux_amd64.zip
    dest: /usr/local/bin
    copy: false

- name: "create autocomplete file"
  copy:
    content: |
      complete -C /usr/local/bin/terraform terraform
    dest: /etc/bash_completion.d/terraform

#
# install packer
#
- name: "get packer latest version"
  uri:
    url: "https://checkpoint-api.hashicorp.com/v1/check/packer"
    method: GET
    body: JSON
    return_contents: false
  register: json_output
  check_mode: false

#
# Find latest version of vagrant.
#
- name: "set version keys"
  set_fact:
    packer_ver: "{{ json_output.json | json_query(ver_qry) }}"
  vars:
    ver_qry: "current_version"

- debug:
    var: packer_ver

- name: "Download Packer"
  get_url:
    url: https://releases.hashicorp.com/packer/{{ packer_ver }}/packer_{{ packer_ver }}_linux_amd64.zip
    dest: /usr/local/src/packer_{{ packer_ver }}_linux_amd64.zip

- name: "Extract and install Packer"
  unarchive:
    src: /usr/local/src/packer_{{ packer_ver }}_linux_amd64.zip
    dest: /usr/local/bin
    copy: false

#
# install vagrant latest
#
- name: "get vagrant latest version"
  uri:
    url: "https://releases.hashicorp.com/vagrant/index.json"
    method: GET
    body: JSON
    return_contents: false
  register: json_output
  check_mode: false

#
# Find latest version of vagrant.
#
- name: "set version keys"
  set_fact:
    vagrant_ver: "{{ json_output.json | json_query(ver_qry) }}"
  vars:
    ver_qry: "versions.keys(@) | sort(@) | max(@)"
- debug: var=vagrant_ver

#
# Find installation url
#
- name: "set version url "
  set_fact:
    vagrant_url: "{{ json_output.json | json_query(url_qry) }}"
  vars:
    url_qry: "versions.\"{{ vagrant_ver}}\".builds[?os == 'debian' && arch == 'x86_64'].url"
- debug: var=vagrant_url


- name: "Deploy Debian: Install debian packages that must be installed directly from web"
  apt:
    deb: "{{ item }}"
    update_cache: false
    cache_valid_time: 3600
  with_items:
    - 'https://release.gitkraken.com/linux/gitkraken-amd64.deb'
    - '{{ vagrant_url }}'
    - '/usr/local/src/azuuredatastudio-{{ sqlos_version }}.deb'


- name: "Deploy Debian: Ensure apt-transport-https is installed"
  apt:
    name=apt-transport-https
    state=present

- name: "Deploy Debian: repository - Oracle key"
  apt_key:
    id: 'B0FAB3A13B907435925D9C954422A4B98AB5139'
    url: 'https://www.virtualbox.org/download/oracle_vbox.asc'
    state: present

- name: "Deploy Debian: repository - Oracle 2016 key"
  apt_key:
    id: 'B9F8D658297AF3EFC18D5CDFA2F683C52980AECF'
    url: 'https://www.virtualbox.org/download/oracle_vbox_2016.asc'
    state: present

- name: "Deploy Debian: repository - riot matrix im client"
  apt_key:
    url: 'https://riot.im/packages/debian/repo-key.asc'
    state: present

- name: "Deploy Debian: repository - Microsoft"
  apt_key:
    url: 'https://packages.microsoft.com/keys/microsoft.asc'
    state: present

- name: "Deloy Debian: repository - chrome"
  apt_key:
    url: 'https://dl.google.com/linux/linux_signing_key.pub'
    state: present

- name: "Deploy Debian: repository - insync"
  apt_key:
    keyserver: 'keyserver.ubuntu.com'
    id: 'ACCAF35C'

- name: "Deploy Debian: repository - pritunel"
  apt_key:
    keyserver: 'keyserver.ubuntu.com'
    id: '7568D9BB55FF9E5287D586017AE645C0CF8E292A'

- name: "Deploy Debian: repository - hashicorp"
  apt_key:
    keyserver: 'keyserver.ubuntu.com'
    id: '51852D87348FFC4C'

- name: "Deploy Debian: docker "
  apt_key:
    url: 'https://download.docker.com/linux/ubuntu/gpg'
    id: '9DC858229FC7DD38854AE2D88D81803C0EBFCD88'

- name: "Deploy Debian: google cloud sdk "
  apt_key:
    url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
    state: present

- name: Import the NodeSource GPG key into apt
  apt_key:
    url: https://keyserver.ubuntu.com/pks/lookup?op=get&fingerprint=on&search=0x1655A0AB68576280
    id: "68576280"
    state: present

- name: Import the NodeSource GPG key into apt
  apt_key:
    url: "http://mozilla.debian.net/archive.asc"
    state: present

- name: "Deploy Debian: Launchpad PPA for Mozilla Team"
  apt_key:
    keyserver: 'keyserver.ubuntu.com'
    id: 'CE49EC21'
    state: present


# https://stackoverflow.com/questions/41102299/unable-to-install-any-pip-module-module-object-has-no-attribute-cryptography
- name: "Deploy Debian: install base packages"
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: false
    cache_valid_time: 3600
  with_items:
    - bash-completion
    - git
    - git-flow
    - meld
    - jq
    - encfs
    - lsyncd
    - python-pip
    - python-dev
    - build-essential
    - pkg-config
    - automake
    - autogen
    - autoconf-archive
    - autoconf
    - libssl-dev
    - libmnl-dev
    - uuid-dev
    - zlib1g-dev
    - libffi-dev
    - librsync-dev
    - libpcsclite-dev
    - libgnome-keyring-dev
    - swig
    - network-manager-openconnect-gnome
    - libpam-google-authenticator
    - gnome-shell
    - ubuntu-gnome-desktop
    - exfat-fuse
    - exfat-utils
    - apt-transport-https
    - software-properties-common
    - ca-certificates
    - curl
    - gconf-service  # GitKraken dependencies
    - gconf2
    - gconf-service-backend
    - gconf2-common
    - libgconf-2-4
    - libcanberra-gtk-module
    - libvirt-dev
    - lvm2

- name: "Deploy Debian: Add repos"
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - 'deb [arch=amd64] http://repo.pritunl.com/stable/apt bionic main'
    - 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
    - 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
    - 'deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod {{ ansible_distribution_release }} main'
    - 'deb [arch=amd64] http://apt.insynchq.com/ubuntu {{ ansible_distribution_release }} non-free contrib'
    - 'deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable'
    - 'deb [arch=amd64] https://packages.cloud.google.com/apt cloud-sdk-{{ ansible_distribution_release }} main'
    - 'deb [arch=amd64] https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main'
    - 'deb [arch=amd64] http://ppa.launchpad.net/mozillateam/firefox-next/ubuntu {{ ansible_distribution_release }} main'
    - 'deb [arch=amd64] https://riot.im/packages/debian/ {{ ansible_distribution_release }} main'
    - 'ppa:sebastian-stenzel/cryptomator'
    # 'deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian {{ ansible_distribution_release }} contrib'
  register: repos

- name: "Deploy Debian: install repo packages"
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: false
    cache_valid_time: 3600
  environment:
    ACCEPT_EULA: 'y'
  with_items:
    - docker-ce
    - dkms
    - google-chrome-stable
    - insync
    - google-cloud-sdk
    - google-cloud-sdk-app-engine-python
    - google-cloud-sdk-app-engine-python-extras
    - nodejs
    - firefox
    - mssql-tools     # microsoft
    - unixodbc-dev     # microsoft
    - code
    - pritunl-client-electron
    - riot-web
    - cryptomator
    - retext
    - redis-cli
    # virtualbox-5.2


- name: "Deploy Debian: Install other user packages"
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: false
    cache_valid_time: 3600
  with_items:
    - chromium-browser
    - keepassx
    - hexchat
    - terminator
    - tcpdump
    - lynx
    - elinks
    - p7zip-full
    - whois
    - nmap
    - zenmap
    - dnsutils
    - net-tools
    - pandoc
    - seahorse-nautilus
    - seahorse-sharing
    - icedtea-netx
    - mariadb-client
    - lm-sensors
    - netcat
    - cpu-checker
    - calibre
    - gparted

- name: "Deploy Debian: Install kvm packages"
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: false
    cache_valid_time: 3600
  with_items:
    - virt-viewer
    - virt-manager
    - qemu-kvm
    - libvirt-bin
    - virtinst
    - bridge-utils


- name: "Deploy Debian: Install yubi packages"
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: false
    cache_valid_time: 3600
  with_items:
    - yubioath-desktop
    - yubikey-personalization-gui
