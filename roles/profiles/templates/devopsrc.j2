##---------------------------------------------------------------------------
## @(#)$Id$
##title          :.bashrc
##description    :Example devops workstation .bashrc file
##author         :Danny W Sheehan
##date           :March 2015
##
##  Configures bash prompt to include
##     - git - branch
##     - Python environment - working project
##     - ruby environment - ruby and gem set versions
##
##  Also adjusts title bar of terminal session to correctly display host
##  you are logged in at.
##

# personal preferences.
# umask 0077
mkdir -p ~/.backups ~/.tmp ~/.local/bin

export EDITOR=vi
export PROJECT_HOME=~/PROJECTS
export WORKON_HOME=~/.virtualenvs

# export DOCKER_HOST=
# export XEN_INVENTORY_INI_PATH=

# export PYENV_VERSION="2.7.12"

export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# export ANSIBLE_VAULT_PASSWORD_FILE=

WEATHER="Brisbane?m"

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

{% raw %}


# guard to avoid breaking scp and sftp if output is displayed.
# [[ $- == *i* ]] || return 0
#
# much quicker method
[ -z "$PS1" ] && return

export HISTCONTROL=ignoredups

# show colors when grepping through logs
my_grep_options=(--color=auto --exclude-dir=.cvs --exclude-dir=.git --exclude-dir=.svn) alias grep='grep $my_grep_options' egrep='grep -E $my_grep_options' fgrep='grep -F $my_grep_options'

# User specific aliases and functions

set_titlebar() {
  case $TERM in
    *xterm*|ansi|rxvt)
      printf "\033]0;%s\007" "$*"
        ;;
    esac
}

# new stuff
alias mdcat="pandoc -f markdown -t plain"
alias getpodnodes='kubectl get pod -o=custom-columns=NODE:.spec.nodeName,NAME:.metadata.name --all-namespaces'

alias kdump="kubectl  get all --all-namespaces"


k8-dashboard(){
  kubectl port-forward -n kube-system "$(kubectl get -n kube-system pod --selector=k8s-app=kubernetes-dashboard -o jsonpath='{.items..metadata.name}')" 8443
}

kmerge() {
  KUBECONFIG=~/.kube/kubeconfig:$1 kubectl config view --flatten > ~/.kube/mergedkub && mv ~/.kube/mergedkub ~/.kube/kubeconfig
}



# install  colordiff package :)
alias cdiff='colordiff'

alias openfile='xdg-open'

alias fact="curl -s randomfunfacts.com | grep strong | cut -d\> -f5- | cut -d\< -f1"

function gravatar { openfile "https://s.gravatar.com/avatar/$(echo -n $@ | md5sum | awk '{print $1}')?s=250"; }

alias mountls='mount |column -t'

alias clearhistory='cat /dev/null > ~/.bash_history && history -c && exit'

alias h='history'
alias j='jobs -l'

alias path='echo -e ${PATH//:/\\n}'
alias nowtime='date +"%T"'
alias nowdate='date +"%Y%m%d"'

# get GPU ram on desktop
alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'

# always resume/continue partial downloads.
alias wget='wget -c'

# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
get_release_download_url() {
  curl --silent "https://api.github.com/repos/$1/releases" | \
    jq --raw-output '.[0].assets[0].browser_download_url'
}


addkey () { sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "$1";}

# find directories with highest inode usage
dinodes() { du --inodes -S "$1" | sort -rh | sed -n  '1,50{/^.\{71\}/s/^\(.\{30\}\).*\(.\{37\}\)$/\1...\2/;p}'; }

mkcd()    { mkdir "$1" && cd "$1"; }
calc()    { awk "BEGIN{ print $* }" ;}
hex2dec() { echo $((16#$1)); }
dec2hex() { awk -v num=$1 'BEGIN { printf "%x\n", num}'; }
mktar()   { tar cztf "${1%%/}.tar.gz" "${1%%/}/"; }
bu()      { cp $1 ~/.backups/$(basename $1)-$(date +%Y%m%d%H%M).bk; }
sudobu()  { sudo cp $1 $1.$(date +%Y%m%d-%H%M); }
nocomment() { egrep -v '^[[:space:]]*$|^ *#|^dnl ' "$1"; }
get_sha() { git rev-parse --short HEAD 2>/dev/null; }

update()  { git pull --rebase "$1";git submodule update --init --recursive "$1"; }

# https://stackoverflow.com/questions/14947789/github-clone-from-pull-request
pullrequest()      { git fetch origin pull/${1}/head:pull_${1}; git checkout pull_${1}; }

# return length and type of pub/priv key
keylen()  { ssh-keygen -lf "$1"; }

encrypt() { gpg -ac --no-options "$1"; }
decrypt() { gpg --no-options "$1"; }

# turn off password aging for user
pwdageoff() { sudo chage -I -1 -m 0 -M 99999 -E -1 "$1"; chage -l "$1"; }

# handle tty permissioning for screen when su'ing to another use
screenas() { OOWN=$(stat -c '%U' $(tty)) && chown "$1" $(tty) && su - "$1" -c screen && chown $OOWN $(tty); }

# allow su users to takeover screen
sscreen() { /usr/bin/script -q -c "/usr/bin/screen ${*}" /dev/null; }

# convert nagios log to readable timestamp
nagioslog() { cat "$1" | perl -pe 's/(\d+)/localtime($1)/e'; }

weather() { curl "http://wttr.in/${1-${WEATHER}}"; }
asn()     { whois -h asn.shadowserver.org "origin $1"; }

# src: https://stackoverflow.com/questions/20762575/explanation-of-convertor-of-cidr-to-netmask-in-linux-shell-netmask2cdir-and-cdir
mask2cdr ()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}

cdr2mask ()
{
   # Number of args to shift, 255..255, first non-255 byte, zeroes
   set -- $(( 5 - ($1 / 8) )) 255 255 255 255 $(( (255 << (8 - ($1 % 8))) & 255 )) 0 0 0
   [ $1 -gt 1 ] && shift $1 || shift
   echo ${1-0}.${2-0}.${3-0}.${4-0}
}

defangf()    { sed -e "s/http/hXXp/g" -e "s/\./\[.\]/g" "$1"; }
refangf()    { sed -e "s/hXXp/http/g" -e "s/\[\(.\)\]/\1/g" "$1"; }

defang()    { echo "$1" | sed -e "s/http/hXXp/g" -e "s/\./\[.\]/g"; }
refang()    { echo "$1" | sed -e "s/hXXp/http/g" -e "s/\[\(.\)\]/\1/g"; }

listips()   { grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}" "$1"; }

listemails() { grep -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b" "$1"; }

# list proxies listed in a file
listproxies()   { grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,4}" "$1"; }

checktor()  { lynx --dump https://check.torproject.org | egrep "^Sorry\.|^Congratulations."; }

listurls()  { grep -oP 'http.?://\S+' "$1"; }
listhrefs() { lynx -dump -listonly "$1"; }

emailipleak() { lynx --dump http://emailipleak.com/ | grep "You are"; }
ipv6leak()  { lynx --dump http://ipv6leak.com/ | grep "You are"; }
dnsleak()   { lynx --dump http://dnsleak.com/ | grep "You are"; }

proxyok()   { export http_proxy="$1" && echo "Your IP address is:"; lynx -dump http://myip.dnsdynamic.org && lynx -dump -head http://pastebin.com; }

httpdebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }

# empty posix mail queue of specific email address
emptymailq () { mailq | grep -v '^ *(' | awk -v USER_MAIL="$1"  'BEGIN { RS = "" } { if ($8 == USER_MAIL && $9 == "") print $1 } ' | tr -d '*!'  | postsuper -d -; }

# apt install pandoc
md2html () { mkdir ./html;pandoc -f markdown -t html "$1" > ./html/${1%.*}.html; }
# recommend: qupzilla as lightweight browser qupzill ./html/<file>.html

# list files that are puppet managed
puppetmanaged () {  sudo find /etc -type f -exec grep -li "^#.*puppet" {} +; }
ansiblemanaged () {  sudo find /etc -type f -exec grep -li "^#.*ansible" {} +; }

# get details of switch i am connected to (assumes CISCO)
myswitch ()  { sudo tcpdump -nn -v -i "$1" -s 1500 -c 1 'ether[20:2] == 0x2000'; }

# check when ssl cert expires
sslexpire () { openssl x509 -enddate -noout -in "$1"; }

siteexpire () { echo | openssl s_client -connect $1:443  2>/dev/null | openssl x509 -noout -dates | grep After; }


# Get name of app that created a corefile.
corename()
{
    for file ; do
        echo -n $file : ; gdb --core=$file --batch | head -1
    done
}

# https://blog.baloneygeek.com/posts/2016/08/19/random-password-one-liners.html
genpasswd () {
    local RPASSWD=$(dd if=/dev/urandom bs=$1 count=1 2> /dev/null | base64 -w0)
    if [[ $2 = "-n" ]]; then
        echo $RPASSWD | tr -cd "[[:alnum:]]"
    else
        echo $RPASSWD
    fi
}

alexa1000 () {
 wget -q http://s3.amazonaws.com/alexa-static/top-1m.csv.zip;unzip top-1m.csv.zip; awk -F ',' '{print $2}' top-1m.csv|head -1000 > top-1000.txt; rm top-1m.csv*
}

alias meminfo='egrep "Mem|Cache|Swap" /proc/meminfo'

myusb () { usb_array=();while read -r -d $'\n'; do usb_array+=("$REPLY"); done < <(find /dev/disk/by-path/ -type l -iname \*usb\*scsi\* -not -iname \*usb\*scsi\*part* -print0 | xargs -0 -iD readlink -f D | cut -c 8) && for usb in "${usb_array[@]}"; do echo "USB drive assigned to sd$usb"; done; }

alias dreaded='ps axl | awk '\''$10 ~ /D/'\'''
alias memhogs='ps wwaxm -o pid,stat,vsize,rss,time,command | head -10'
alias cpuhogs='ps wwaxr -o pid,stat,%cpu,time,command | head -10'

alias myinetip='dig +short myip.opendns.com @resolver1.opendns.com'
alias myproxip='curl https://api.ipify.org;echo'

alias bigfiles="find . -type f 2>/dev/null | xargs du -a 2>/dev/null | awk '{ if ( \$1 > 100000) print \$0 }'"

# ping router
alias pr="ping \`netstat -nr| grep -m 1 -iE 'default|0.0.0.0' | awk '{print \$2}'\`"

# processes with biggest open files
fopenmemhogs() { sudo lsof -s | awk '$5 == "REG"' | sort -n -r -k 7,7 | head -n 50; }

# processes with most open files
fopencounthogs() { sudo lsof | awk '$5 == "REG" {freq[$2]++ ; names[$2] = $1 ;} END {for (pid in freq) print freq[pid], names[pid], pid ; }' | sort -n -r -k 1,1; }


# get web server headers #
alias header='curl -I'

# find out if remote server supports gzip / mod_deflate or not #
alias headerc='curl -I --compress'

# Quick way to serve files in HTTP from the local dir (be careful)
alias webs='python -m SimpleHTTPServer'

# tail all logs
alias logs="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

# show fwrules with line numbers
alias fwrules='sudo /sbin/iptables -L -n -v --line-numbers'

# show only hidden files
alias hidden="ls -drt1 \.* | egrep -v \"^(\.|\.\.)$\""

#if [ "$UNAME" = Darwin ]; then
#  trash()     { command mv "$@" ~/.Trash ; }
#  spotlight() { mdfind "kMDItemDisplayName == '$@'wc"; }
#fi

# shellcheck disable=SC2005
function genpass-simple {
  echo "$(LC_ALL=C tr -cd A-Za-z0-9 < /dev/urandom | head -c${1:-16})"
}

# shellcheck disable=SC2005
function genpass-b64 {
  echo "$(base64 -w0 < /dev/urandom | head -c${1:-32})"
}

# shellcheck disable=SC2005
function genpass-complex {
  echo "$(LC_ALL=C tr -cd ' -~' < /dev/urandom | head -c${1:-64})"
}





GPROMPT="https://github.com/git/git/raw/master/contrib/completion/git-prompt.sh"
if [ -s /usr/share/git-core/contrib/completion/git-prompt.sh ];then
  source /usr/share/git-core/contrib/completion/git-prompt.sh
elif [ -s /usr/lib/git-core/git-sh-prompt ];then
  source /usr/lib/git-core/git-sh-prompt
elif [ -s ~/.git-prompt.sh ];then
  source ~/.git-prompt.sh
elif which wget > /dev/null && wget -q $GPROMPT -O ~/.git-prompt.sh
then
  source ~/.git-prompt.sh
fi

# https://blog.shichao.io/2014/10/01/setup_virtualenvwrapper_with_pyenv_using_pyenv_virtualenvwrapper.html
# Create a virtualenv from the system version:
# $   mkvirtualenv env1 -p $(which python)
# Similarly, create a virtualenv from 3.4:
# $   mkvirtualenv env2 -p $(which python3.4)
# #
export PATH="$HOME/.pyenv/bin:$PATH"
if which pyenv > /dev/null 2>&1; then
  # pyenv
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"

  if pyenv commands | egrep -q "^virtualenvwrapper"; then
    pyenv virtualenvwrapper
  fi
elif [ -s /usr/bin/virtualenvwrapper.sh ];then
  source /usr/bin/virtualenvwrapper.sh
elif [ -s /usr/local/bin/virtualenvwrapper.sh ];then
  source /usr/local/bin/virtualenvwrapper.sh
elif [ -s /usr/share/virtualenvwrapper/virtualenvwrapper.sh ];then
  source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
fi


export PATH="$PATH:$HOME/.rvm/bin"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

export PATH=$PATH:~/.local/bin:/usr/local/go/bin

# pip install --user --upgrade httpstat
# pip install --user --upgrade googler
# pip install --user --upgrade speedtest_cli

alias speedtest="which pip > /dev/null && pip -q show speedtest-cli && speedtest-cli --simple"

alias pipup='pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs pip install -U'

# Reset
Color_Off="\[\033[0m\]"       # Text Reset

# Regular Colors
Black="\[\033[0;30m\]"        # Black
Red="\[\033[0;31m\]"          # Red
Green="\[\033[0;32m\]"        # Green
Yellow="\[\033[0;33m\]"       # Yellow
Blue="\[\033[0;34m\]"         # Blue
Purple="\[\033[0;35m\]"       # Purple
Cyan="\[\033[0;36m\]"         # Cyan
White="\[\033[0;37m\]"        # White

GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWCOLORHINTS=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUPSTREAM="auto"

if which aws_completer > /dev/null 2>&1; then
  complete -C $(which aws_completer) aws
fi

enter_directory(){
  if [ -f ".terraform/environment" ]; then
    TERRAFORM_ENV=$(cat ".terraform/environment")
  else
    unset TERRAFORM_ENV
  fi
  if [ "$PWD" != "$PREV_PWD" ]; then
    PREV_PWD="$PWD";
    if [ -e ".nvmrc" ]; then
      nvm use;
    elif [[ $(nvm version) != $(nvm version default)  ]]; then
      echo "Reverting to nvm default version."
      nvm use default
    fi
  fi
}


set_prompt_vars(){
  if which aws > /dev/null 2>&1; then
    age=$(stat -c %Y ~/.aws/credentials)
    now=$(date +"%s")
    if (( (now - age) < 30 ));then
      AWS_STS=$(aws sts get-caller-identity --query Arn --output text 2> /dev/null)
      if [ $? -eq 0 ];then
        AWS_STS_ROLE=$(echo $AWS_STS  | cut -d\/ -f2)
        AWS_STS_ACCOUNT=$(echo $AWS_STS  | cut -d \: -f5)
      fi
    fi
  fi
  if which assume > /dev/null 2>&1; then
    AWS_STS_ACCOUNT=""
    AWS_STS_ROLE=$(assume --dt)
  fi

  k8s_current_context=$(kubectl config current-context 2> /dev/null)
  if [[ $? -eq 0 ]]; then
    k8s_current_ns=$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"${k8s_current_context}\")].context.namespace}")
  fi
}

PROMPT_COMMAND='enter_directory;set_prompt_vars; __git_ps1 "[${Yellow}$(echo -e code $?)$Color_Off]\n${AWS_STS_ROLE:+[${Purple}AWS:$AWS_STS_ACCOUNT $AWS_STS_ROLE $AWS_PROFILE$Color_Off]\n}${KUBECONFIG:+[${Blue}K8S: $k8s_current_context $k8s_current_ns$Color_Off]\n}${VIRTUAL_ENV:+[${Yellow}PYENV: $(basename $VIRTUAL_ENV)$Color_Off]\n}${TERRAFORM_ENV:+[${Red}TERRAFORM: $TERRAFORM_ENV${Color_Off}]\n}${NVM_BIN:+[${Red}NODE: $(nvm current)$Color_Off]\n}${GEM_HOME:+[${Cyan}$(rvm-prompt i v p g)$Color_Off]\n}" "\h:\W \u\\\$ " "[%s $(get_sha)]\n";set_titlebar "$USER@${HOSTNAME%%.*} $(basename $PWD) "'
{% endraw %}
